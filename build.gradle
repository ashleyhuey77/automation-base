
/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'ashleyhuey' at '1/9/17 1:13 PM' with Gradle 3.0
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.0/userguide/tutorial_java_projects.html
 */

buildscript {

    repositories {
        maven{url "https://plugins.gradle.org/m2/"}
        mavenCentral()
    }

    dependencies {
        classpath "com.sun.mail:javax.mail:1.6.0"
    }

}

plugins {
    id 'java-library'
    id("maven-publish")
}

publishing {
    publications {
        library(MavenPublication) {
            from components.java
            groupId         "dev"
        }
    }
    repositories {
        maven {
            url "https://atom-git.turner.com/api/v4/projects/814/packages/maven"
            name "GitLab"
            credentials(HttpHeaderCredentials) {
                name = "Private-Token"
                value = "hrQSxzoyghzkyNFhxiQV"
            }
            authentication {
                header(HttpHeaderAuthentication)
            }
        }
    }
}

configurations {
    jaxDoclet
}
sourceCompatibility = '1.8'
targetCompatibility = '1.8'

sourceSets {
    main {
        java {
            srcDir 'src/main'
        }
        resources {
            srcDir 'resources'
            include 'HTMLReport.html'
        }
    }
    test {
        java {
            srcDir 'src/test'
        }
    }
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    mavenCentral()
    mavenLocal()
    maven {
        url "https://atom-git.turner.com/api/v4/projects/1702/packages/maven"
        name "GitLab"
        credentials(HttpHeaderCredentials) {
            name = 'Private-Token'
            value = 'd5AfrHeyeRtyBBH1iPxV'
        }
        authentication {
            header(HttpHeaderAuthentication)
        }
    }
}

// In this section you declare the dependencies for your production and test code
dependencies {

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testimplementation dependency to testimplementation 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    implementation 'org.testng:testng:7.5'
    implementation 'org.seleniumhq.selenium:selenium-java:4.1.4'
    implementation 'org.apache.httpcomponents:httpclient:4.5.13'
    implementation 'com.google.code.gson:gson:2.9.0'
    implementation 'org.apache.commons:commons-collections4:4.4'
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'commons-io:commons-io:2.11.0'
    implementation 'com.google.guava:guava:31.1-jre'
    implementation 'com.sun.mail:javax.mail:1.6.2'
    implementation 'javax.activation:activation:1.1.1'
    implementation 'org.jsoup:jsoup:1.14.3'
    implementation 'org.yaml:snakeyaml:1.30'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.13.3'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.13.3'
    //implementation 'io.appium:java-client:7.3.0'
    implementation 'org.json:json:20220320'
    implementation 'com.warnermedia:automation.security:1.3.6'
    implementation 'org.apache.httpcomponents.client5:httpclient5:5.1.3'
    implementation 'org.brotli:dec:0.1.2'
    implementation 'org.apache.commons:commons-compress:1.21'
    implementation 'org.mongodb:mongodb-driver-legacy:4.6.0'
}

task setupChrome(type: JavaExec) {
    classpath sourceSets.main.runtimeClasspath
    main = "com.warnermedia.wdm.StartupApp"
}

task cleanupChrome(type: JavaExec) {
    classpath sourceSets.main.runtimeClasspath
    main = "com.warnermedia.wdm.CleanupApp"
}

task runUnitTests(type: Test) {
    systemProperties project.properties.subMap(["appUrl", "env", "browser", "isHeadless", "oS"])
    useTestNG() {
        // runlist to executed. path is relative to current folder
        suites 'src/test/tests/Regression.xml'
        useDefaultListeners = true
    }
    reports.html.destination = file("${reporting.baseDir}")
    ignoreFailures = true
}

version = '7.28.09'

task updateVersion {
    doLast {
        def ver = version
        def (a, b, c) = ver.tokenize('.')
        int major = a.toInteger()
        int minor = b.toInteger()
        int patch = c.toInteger()
        if (project.hasProperty('v')) {
            if (v.toLowerCase() == "major") {
                major = major + 1
            } else if (v.toLowerCase() == "minor") {
                minor = minor + 1
            } else {
                patch = patch + 1
            }
        } else {
            patch = patch + 1
        }
        String newVersion = buildFile.getText().replaceFirst("version='$version'", "version='" + major + "." + minor + "." + patch + "'")
        buildFile.setText(newVersion)
        println 'Verison is ' + newVersion
    }
}



jar {
    from sourceSets.main.allSource
    archiveBaseName = 'automation.base'
    manifest {
        attributes 'Class-Path': configurations.compileClasspath.collect { it.absolutePath }.join(" ")
    }
}
 
 
