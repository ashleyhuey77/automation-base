/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'ashleyhuey' at '1/9/17 1:13 PM' with Gradle 3.0
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.0/userguide/tutorial_java_projects.html
 */

buildscript {

	repositories {
    	maven {
      	url "https://plugins.gradle.org/m2/"
    	}
  	}
  	
  	dependencies {
    	classpath "com.github.jengelman.gradle.plugins:shadow:2.0.0"
    	classpath "com.sun.mail:javax.mail:1.6.0"
  	}
  
 }
 
  configurations {
   jaxDoclet
 }
 
 apply plugin: "com.github.johnrengelman.shadow"
 

// Apply the java plugin to add support for Java
apply plugin: 'java'

sourceSets {
    main {
    	java {
			srcDir 'src/main'
		}
    }
    test {
    	java {
        	srcDir 'src/test'
        }
    }
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    mavenCentral()
    mavenLocal()
    jcenter()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.21'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    compile group: 'junit', name: 'junit', version: '4.12' 
    compile "org.testng:testng:6.3.1"
    compile group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '3.6.0'
    compile group: 'org.seleniumhq.selenium', name: 'selenium-support', version: '3.7.1'
    compile group: 'commons-collections', name: 'commons-collections', version: '3.2'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.6'
    compile group: 'commons-io', name: 'commons-io', version: '2.0.1'
    compile group: 'com.google.guava', name: 'guava', version: '23.0'
   	compile group: 'com.sun.mail', name: 'javax.mail', version: '1.6.0'
   	compile group: 'javax.activation', name: 'activation', version: '1.1.1'
   	compile 'org.jsoup:jsoup:1.11.1'
}

version='2.1.2'

task updateVersion {
	doLast {
		def ver = version
	 	def (a, b, c) = ver.tokenize('.')
	 	int major = a.toInteger()
	 	int minor = b.toInteger()
	 	int patch = c.toInteger()
	 	if (project.hasProperty('v')) {
	 		if(v.toLowerCase() == "major") {
	 			major = major+1
	 		} else if (v.toLowerCase() == "minor") {
	 			minor = minor+1
	 		} else {
	 			patch = patch+1
	 		}
	 	} else {
	 		patch = patch+1
	 	}
	    String newVersion=buildFile.getText().replaceFirst("version='$version'","version='"+major+ "." +minor+"." +patch+"'")
	    buildFile.setText(newVersion)
		println 'Verison is ' + newVersion
	}
}

 jar {
 	from sourceSets.main.allSource
	baseName 'automation.base'
 }
 
 
